'''
    Travis Seal
    purpose: build new features email ratio, and exercised stock ratio
    inputs: dataDict, featuresList
    outputs: new features generated by the functions below
    02/10/2018
'''
import sys
sys.path.append("../tools/")


"""
    Input: data dictionary, featuresList
    Returns: POI Email Ratio.
"""
def CreatePoiEmailRatio(dataDict, featuresList):

    #features we are interested in
    features = [ 'from_poi_to_this_person',
                'from_this_person_to_poi','from_messages', 'to_messages']

    for k in dataDict:
        employee = dataDict[k]
        isValid = True
        for feature in features:
            if employee[feature] == 'NaN':
                isValid = False
        if isValid:
            fromTotal = employee['from_poi_to_this_person'] + employee['from_messages']
            toTotal = employee['from_this_person_to_poi'] + employee['to_messages']
            toPoiRatio = float(employee['from_this_person_to_poi']) / toTotal
            fromPoiRatio = float(employee['from_poi_to_this_person']) / fromTotal
            employee['poi_email_ratio'] = toPoiRatio + fromPoiRatio
        else:
            employee['poi_email_ratio'] = 'NaN'

    featuresList.append('poi_email_ratio')


    return featuresList

"""
    Input: data dictionary, featuresList
    Returns: exercised stock ratio
"""
def CreateExercisedStockRatio(data_dict, features_list):

    features = ['exercised_stock_options', 'total_stock_value']

    for key in data_dict:
        employee = data_dict[key]
        is_valid = True
        for feature in features:
            if employee[feature] == 'NaN':
                is_valid = False
        if is_valid:
            employee['exercised_stock_ratio'] = float(employee['exercised_stock_options']) / employee['total_stock_value']
        else:
            employee['exercised_stock_ratio'] = 'NaN'

    features_list.append('exercised_stock_ratio')
    return features_list